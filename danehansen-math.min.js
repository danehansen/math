(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["math"] = factory();
	else
		root["danehansen"] = root["danehansen"] || {}, root["danehansen"]["math"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["average"] = average;
/* harmony export (immutable) */ __webpack_exports__["ceil"] = ceil;
/* harmony export (immutable) */ __webpack_exports__["circleIntersection"] = circleIntersection;
/* harmony export (immutable) */ __webpack_exports__["ease"] = ease;
/* harmony export (immutable) */ __webpack_exports__["easeProp"] = easeProp;
/* harmony export (immutable) */ __webpack_exports__["euclid"] = euclid;
/* harmony export (immutable) */ __webpack_exports__["floor"] = floor;
/* harmony export (immutable) */ __webpack_exports__["intLength"] = intLength;
/* harmony export (immutable) */ __webpack_exports__["luhn"] = luhn;
/* harmony export (immutable) */ __webpack_exports__["modulo"] = modulo;
/* harmony export (immutable) */ __webpack_exports__["normalize"] = normalize;
/* harmony export (immutable) */ __webpack_exports__["primes"] = primes;
/* harmony export (immutable) */ __webpack_exports__["random"] = random;
/* harmony export (immutable) */ __webpack_exports__["randomItem"] = randomItem;
/* harmony export (immutable) */ __webpack_exports__["randomDirection"] = randomDirection;
/* harmony export (immutable) */ __webpack_exports__["randomBoolean"] = randomBoolean;
/* harmony export (immutable) */ __webpack_exports__["relativePercentage"] = relativePercentage;
/* harmony export (immutable) */ __webpack_exports__["round"] = round;
/* harmony export (immutable) */ __webpack_exports__["shuffle"] = shuffle;
/* harmony export (immutable) */ __webpack_exports__["sortAscending"] = sortAscending;
/* harmony export (immutable) */ __webpack_exports__["sortDescending"] = sortDescending;
/* harmony export (immutable) */ __webpack_exports__["splitUint"] = splitUint;
/* harmony export (immutable) */ __webpack_exports__["toDegrees"] = toDegrees;
/* harmony export (immutable) */ __webpack_exports__["toDegreeDirection"] = toDegreeDirection;
/* harmony export (immutable) */ __webpack_exports__["toRadians"] = toRadians;
/* harmony export (immutable) */ __webpack_exports__["toRadianDirection"] = toRadianDirection;
/* harmony export (immutable) */ __webpack_exports__["total"] = total;
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _createForOfIteratorHelper(o, allowArrayLike) { var it; if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = o[Symbol.iterator](); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function average() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var first = args[0];
  var array = typeof first === "number" ? args : first;
  var total = 0;

  var _iterator = _createForOfIteratorHelper(array),
      _step;

  try {
    for (_iterator.s(); !(_step = _iterator.n()).done;) {
      var _float = _step.value;
      total += _float;
    }
  } catch (err) {
    _iterator.e(err);
  } finally {
    _iterator.f();
  }

  return total / array.length;
}
function ceil(num) {
  var increment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  return increment * Math.ceil(num / increment);
}
function circleIntersection(centerA, radiusA, centerB, radiusB) {
  var dx = centerB.x - centerA.x;
  var dy = centerB.y - centerA.y;
  var d = Math.sqrt(dy * dy + dx * dx);

  if (d > radiusA + radiusB || d < Math.abs(radiusA - radiusB)) {
    return [];
  }

  var a = (radiusA * radiusA - radiusB * radiusB + d * d) / (2 * d);
  var x2 = centerA.x + dx * a / d;
  var y2 = centerA.y + dy * a / d;
  var h = Math.sqrt(radiusA * radiusA - a * a);
  var rx = -dy * (h / d);
  var ry = dx * (h / d);
  var i1 = {
    x: x2 + rx,
    y: y2 + ry
  };
  var i2 = {
    x: x2 - rx,
    y: y2 - ry
  };
  var points = [i1];

  if (i1.x !== i2.x || i1.y !== i2.y) {
    points.push(i2);
  }

  return points;
}
function ease(current, dest) {
  var speed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.05;
  return current += (dest - current) * speed;
}
function easeProp(targ, key, dest, speed) {
  var current = ease(targ[key], dest, speed);
  targ[key] = current;
  return current;
}
function euclid(a, b) {
  if (b === 0) {
    return a;
  } else {
    return euclid(b, a % b);
  }
}
function floor(num) {
  var increment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  return increment * Math.floor(num / increment);
}
function intLength(num) {
  if (!num) {
    return 0;
  }

  var abs = Math.abs(num);
  var len = Math.ceil(Math.log(abs) / Math.LN10);
  var log = Math.log10(abs);

  if (log === Math.floor(log)) {
    len++;
  }

  return len;
}
function luhn(num) {
  var check;
  var even = true;
  var total = 0;

  while (num > 1) {
    var d = num % 10;
    num = (num - d) / 10;

    if (check === undefined) {
      check = d;
    } else {
      if (!even) {
        d *= 2;

        if (d > 9) {
          d -= 9;
        }
      }

      total += d;
    }

    even = !even;
  }

  var numCheck = (10 - total % 10) % 10;
  return check === numCheck;
}
function modulo(num, limit) {
  if (!limit) {
    return 0;
  }

  var mod = num % limit;

  if (num >= 0) {
    return mod;
  } else if (mod < 0) {
    return (mod + limit) % limit;
  } else {
    return 0;
  }
}
function normalize(low, high, value) {
  return (value - low) / (high - low);
}
function primes(limit) {
  var sieve = [];
  var primes = [];

  for (var i = 2; i <= limit; ++i) {
    if (!sieve[i]) {
      primes.push(i);

      for (var j = i * 2; j <= limit; j += i) {
        sieve[j] = true;
      }
    }
  }

  return primes;
}
function random() {
  var limitA = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
  var limitB = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var round = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  var choke = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
  var total = 0;

  if (!round) {
    for (var i = 0; i < choke; i++) {
      total += Math.random() * ((limitB - limitA) / choke);
    }

    return limitA + total;
  } else {
    var low = Math.ceil(Math.min(limitA, limitB));
    var high = Math.floor(Math.max(limitA, limitB));

    for (var _i = 0; _i < choke; _i++) {
      total += Math.random() * ((high + 1 - low) / choke);
    }

    return Math.floor(low + total);
  }
}
function randomItem(array) {
  var choke = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  return array[random(0, array.length - 1, true, choke)];
}
function randomDirection() {
  return Math.random() > 0.5 ? 1 : -1;
}
function randomBoolean() {
  return Math.random() > 0.5 ? true : false;
} // TODO: deprecate

function relativePercentage(start, end, current) {
  console.log("relativePercentage is deprecated. plz switch to normalize");
  return normalize(start, end, current);
}
function round(num) {
  var increment = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
  return increment * Math.round(num / increment);
}
function shuffle(array, duplicate) {
  var shuffledArray = duplicate ? _toConsumableArray(array) : array;

  for (var i = 0, length = array.length; i < length; i++) {
    var randomIndex = Math.floor(Math.random() * (length - i));
    var dest = shuffledArray[length - 1 - i];
    shuffledArray[length - 1 - i] = shuffledArray[randomIndex];
    shuffledArray[randomIndex] = dest;
  }

  return shuffledArray;
}
function sortAscending(a, b) {
  return a > b ? 1 : a < b ? -1 : 0;
}
function sortDescending(a, b) {
  return a > b ? -1 : a < b ? 1 : 0;
}
function splitUint(num) {
  var length = intLength(num);
  var split = [];

  for (var i = 0; i < length; i++) {
    var d = num % 10;
    split.unshift(d);
    num = (num - d) / 10;
  }

  return split;
}
function toDegrees(radians) {
  return radians * 180 / Math.PI;
}
function toDegreeDirection(radians) {
  var degrees = toDegrees(-radians);
  return modulo(degrees + 90, 360);
}
function toRadians(degrees) {
  return degrees * Math.PI / 180;
}
function toRadianDirection(degrees) {
  var circ = Math.PI * 2;
  var radians = toRadians(-degrees);
  var offset = radians + circ * 0.25;
  return modulo(offset, circ);
}
function total(array) {
  var sum = 0;

  for (var i = 0, length = array.length; i < length; i++) {
    var value = array[i];

    if (typeof value === "number" && !isNaN(value)) {
      sum += value;
    } else if (value) {
      sum++;
    }
  }

  return sum;
}

/***/ })
/******/ ]);
});